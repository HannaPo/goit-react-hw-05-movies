{"version":3,"file":"static/js/736.a8e58dc5.chunk.js","mappings":"+QAEaA,EAAaC,EAAAA,EAAAA,IAAH,oFAMVC,EAAWD,EAAAA,EAAAA,GAAH,+NASRE,EAAQF,EAAAA,EAAAA,GAAH,2RAiBLG,EAAOH,EAAAA,EAAAA,EAAH,6G,SC7BJI,EAAO,WAClB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KAYA,OAVAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBR,GACbS,MAAK,SAAAC,GACJN,EAAQM,EACT,IACAC,OAAM,SAAAN,GACLC,EAASD,EAAMO,QAChB,GACJ,GAAE,CAACZ,KAGF,iCACE,SAACJ,EAAD,UACGO,EAAKU,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACR,UAACpB,EAAD,YACE,SAACH,EAAD,CACEwB,IAAG,UACDH,EAAY,0CAC2BA,GAD3B,mDAEoCC,IAElDG,IAAKH,KAEP,UAAClB,EAAD,qBAAckB,MACd,UAAClB,EAAD,yBAAkBmB,OAVRH,EADJ,MAeXT,IAAS,uEAGf,EAED,G,+LCzCAe,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAe,IAAIC,gBAAgB,CACvCC,QAAS,mCACTC,OAAQ,MACRC,SAAU,QACVC,eAAe,IAGJC,EAAW,mCAAG,sGACFP,EAAAA,EAAAA,IAAA,8BAAiCC,IAD/B,uBACjBX,EADiB,EACjBA,KADiB,kBAGlBA,EAAKkB,SAHa,2CAAH,qDAMXC,EAAY,mCAAG,WAAMC,GAAN,yFACHV,EAAAA,EAAAA,IAAA,wBACJC,EADI,kBACkBS,IAFf,uBAClBpB,EADkB,EAClBA,KADkB,kBAKnBA,EAAKkB,SALc,2CAAH,sDAQZG,EAAkB,mCAAG,WAAO/B,GAAP,yFACToB,EAAAA,EAAAA,IAAA,iBAAoBpB,EAApB,YAA+BqB,IADtB,uBACxBX,EADwB,EACxBA,KADwB,kBAGzBA,GAHyB,2CAAH,sDAMlBF,EAAe,mCAAG,WAAOR,GAAP,yFACNoB,EAAAA,EAAAA,IAAA,iBAAoBpB,EAApB,oBAAuCqB,IADjC,uBACrBX,EADqB,EACrBA,KADqB,kBAGtBA,EAAKP,MAHiB,2CAAH,sDAMf6B,EAAkB,mCAAG,WAAOhC,GAAP,yFACToB,EAAAA,EAAAA,IAAA,iBAAoBpB,EAApB,oBAAuCqB,IAD9B,uBACxBX,EADwB,EACxBA,KADwB,kBAGzBA,EAAKkB,SAHoB,2CAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/movieApi.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ActorImage = styled.img`\n  max-width: 150px;\n  height: auto;\n  object-fit: cover;\n`;\n\nexport const LinkList = styled.ul`\n  display: grid;\n  max-width: calc(150vw - 38px);\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-left: auto;\n  margin-right: auto;\n`;\nexport const Actor = styled.li`\n  margin-bottom: 10px;\n  background-color: #f2f2f2;\n  padding: 8px;\n  border-radius: 5px;\n\n  font-weight: 500;\n  font-size: 14px;\n  text-align: center;\n  border-radius: 10px;\n  overflow: hidden;\n\n  &:hover {\n    background-color: #13573a5c;\n  }\n`;\n\nexport const Info = styled.p`\n  margin-top: 5px;\n  margin-bottom: 5px;\n  font-size: 14px;\n  line-height: 1.25;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMoviesCast } from '../../services/movieApi';\nimport { LinkList, Actor, ActorImage, Info } from './Cast.styled';\n\nexport const Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    fetchMoviesCast(movieId)\n      .then(data => {\n        setCast(data);\n      })\n      .catch(error => {\n        setError(error.message);\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      <LinkList>\n        {cast.map(({ id, profile_path, name, character }) => (\n          <Actor key={id}>\n            <ActorImage\n              src={`${\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w200/${profile_path}`\n                  : `https://via.placeholder.com/150x225?text=${name}`\n              }`}\n              alt={name}\n            />\n            <Info>Actor: {name}</Info>\n            <Info>Character: {character}</Info>\n          </Actor>\n        ))}\n      </LinkList>\n      {error && <p>There is no information about movie cast </p>}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst searchParams = new URLSearchParams({\n  api_key: 'a20661da71bad761bc63fca9b3028f72',\n  method: 'GET',\n  language: 'en-US',\n  include_adult: false,\n });\n\nexport const fetchTrends = async () => {\n  const { data } = await axios.get(`/trending/movie/day?${searchParams}`);\n\n  return data.results;\n};\n\nexport const searchMovies = async query => {\n  const { data } = await axios.get(\n    `/search/movie?${searchParams}&query=${query}`\n  );\n\n  return data.results;\n};\n\nexport const fetchMoviesDetails = async (movieId) => {\n  const { data } = await axios.get(`/movie/${movieId}?${searchParams}`);\n\n  return data;\n};\n\nexport const fetchMoviesCast = async (movieId) => {\n  const { data } = await axios.get(`/movie/${movieId}/credits?${searchParams}`);\n\n  return data.cast;\n};\n\nexport const fetchMoviesReviews = async (movieId) => {\n  const { data } = await axios.get(`/movie/${movieId}/reviews?${searchParams}`);\n\n  return data.results;\n};\n"],"names":["ActorImage","styled","LinkList","Actor","Info","Cast","movieId","useParams","useState","cast","setCast","error","setError","useEffect","fetchMoviesCast","then","data","catch","message","map","id","profile_path","name","character","src","alt","axios","searchParams","URLSearchParams","api_key","method","language","include_adult","fetchTrends","results","searchMovies","query","fetchMoviesDetails","fetchMoviesReviews"],"sourceRoot":""}