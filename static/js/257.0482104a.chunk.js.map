{"version":3,"file":"static/js/257.0482104a.chunk.js","mappings":"qQAGaA,EAAYC,EAAAA,EAAAA,IAAH,4LAUTC,EAAaD,EAAAA,EAAAA,IAAH,oFAKVE,GAAaF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,kIAQVI,GAAgBJ,EAAAA,EAAAA,GAAOK,EAAAA,GAAPL,CAAH,qEAKbM,EAAQN,EAAAA,EAAAA,GAAH,sEAKLO,EAAWP,EAAAA,EAAAA,GAAH,oEAKRQ,EAAWR,EAAAA,EAAAA,GAAH,+EAMRS,EAAOT,EAAAA,EAAAA,EAAH,mK,SC2BjB,EA3DqB,WAAO,IAAD,IACzB,GAA0BU,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,EAAW,qBADAC,EAAAA,EAAAA,MACYC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAQ5C,OANAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAmBP,GAASQ,MAAK,SAAAC,GAC/BV,EAASU,EACV,GACF,GAAE,CAACT,IAGFF,IACE,gCACE,SAACT,EAAD,CAAYqB,GAAIR,EAAhB,sBACA,UAAChB,EAAD,YACE,0BACE,SAACE,EAAD,CACEuB,IAAG,0CAAqCb,EAAMc,aAC9CC,IAAKf,EAAMgB,WAGf,4BACE,SAACrB,EAAD,UAAQK,EAAMgB,SACd,4BACE,wCAAgBC,KAAKC,MAA2B,GAArBlB,EAAMmB,cAAjC,QACA,SAACvB,EAAD,wBACA,uBAAII,EAAMoB,YACV,SAACxB,EAAD,sBACA,SAACC,EAAD,UACGG,EAAMqB,OAAOC,KAAI,SAAAC,GAAK,OACrB,wBAAoBA,EAAMC,MAAjBD,EAAME,GADM,gBAO/B,SAAC3B,EAAD,sCACA,UAACD,EAAD,YACE,yBACE,SAACJ,EAAD,CAAemB,GAAG,OAAON,MAAO,CAAEC,KAAMH,GAAxC,qBAIF,yBACE,SAACX,EAAD,CAAemB,GAAG,UAAUN,MAAO,CAAEC,KAAMH,GAA3C,2BAKJ,SAAC,EAAAsB,SAAD,CAAUC,UAAU,6CAApB,UACE,SAAC,KAAD,QAKT,C,+LCtEDC,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAe,IAAIC,gBAAgB,CACvCC,QAAS,mCACTC,OAAQ,MACRC,SAAU,QACVC,eAAe,IAGJC,EAAW,mCAAG,sGACFP,EAAAA,EAAAA,IAAA,8BAAiCC,IAD/B,uBACjBlB,EADiB,EACjBA,KADiB,kBAGlBA,EAAKyB,SAHa,2CAAH,qDAMXC,EAAY,mCAAG,WAAMC,GAAN,yFACHV,EAAAA,EAAAA,IAAA,wBACJC,EADI,kBACkBS,IAFf,uBAClB3B,EADkB,EAClBA,KADkB,kBAKnBA,EAAKyB,SALc,2CAAH,sDAQZ3B,EAAkB,mCAAG,WAAOP,GAAP,yFACT0B,EAAAA,EAAAA,IAAA,iBAAoB1B,EAApB,YAA+B2B,IADtB,uBACxBlB,EADwB,EACxBA,KADwB,kBAGzBA,GAHyB,2CAAH,sDAMlB4B,EAAe,mCAAG,WAAOrC,GAAP,yFACN0B,EAAAA,EAAAA,IAAA,iBAAoB1B,EAApB,oBAAuC2B,IADjC,uBACrBlB,EADqB,EACrBA,KADqB,kBAGtBA,EAAK6B,MAHiB,2CAAH,sDAMfC,EAAkB,mCAAG,WAAOvC,GAAP,yFACT0B,EAAAA,EAAAA,IAAA,iBAAoB1B,EAApB,oBAAuC2B,IAD9B,uBACxBlB,EADwB,EACxBA,KADwB,kBAGzBA,EAAKyB,SAHoB,2CAAH,qD","sources":["pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx","services/movieApi.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link, NavLink } from 'react-router-dom';\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  background-color: #13573a5c;\n  padding: 15px;\n  border-radius: 5px;\n  gap: 25px;\n`;\n\nexport const MovieImage = styled.img`\n  min-width: 200px;\n  height: auto;\n  object-fit: cover;\n`;\nexport const StyledLink = styled(Link)`\n  display: inline-block;\n  margin: 15px 0;\n  padding: 8px;\n  font-weight: 700;\n  border-radius: 5px;\n`;\n\nexport const StyledNavLink = styled(NavLink)`\n  font-size: 18px;\n  font-weight: 700;\n    `;\n\nexport const Title = styled.h2`\n  margin-bottom: 10px;\n  font-size: 32px;\n  `;\n\nexport const SubTitle = styled.h3`\n  margin-top: 16px;\n  margin-bottom: 4px;\n`;\n\nexport const LinkList = styled.ul`\n  display: flex;\n  gap: 8px;\n  margin-bottom: 15px;\n`;\n\nexport const Info = styled.p`\n  margin-top: 28px;\n  margin-bottom: 14px;\n  font-size: 20px;\n  font-weight: 700;\n  line-height: 1.5;\n    text-transform: uppercase;\n`;\n","import React, { Suspense, useEffect, useState } from 'react';\nimport { Outlet, useParams, useLocation } from 'react-router-dom';\n\nimport { fetchMoviesDetails } from '../../services/movieApi';\nimport {\n  Container,\n  MovieImage,\n  Title,\n  SubTitle,\n  Info,\n  StyledLink,\n  LinkList,\n  StyledNavLink,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkRef = location.state?.from ?? '/';\n\n  useEffect(() => {\n    fetchMoviesDetails(movieId).then(data => {\n      setMovie(data);\n    });\n  }, [movieId]);\n\n  return (\n    movie && (\n      <section>\n        <StyledLink to={backLinkRef}>Go back</StyledLink>\n        <Container>\n          <div>\n            <MovieImage\n              src={`https://image.tmdb.org/t/p/w300/${movie.poster_path}`}\n              alt={movie.title}\n            />\n          </div>\n          <div>\n            <Title>{movie.title}</Title>\n            <div>\n              <p>User score: {Math.round(movie.vote_average * 10)}%</p>\n              <SubTitle>Overview</SubTitle>\n              <p>{movie.overview}</p>\n              <SubTitle>Genres</SubTitle>\n              <LinkList>\n                {movie.genres.map(genre => (\n                  <li key={genre.id}>{genre.name}</li>\n                ))}\n              </LinkList>\n            </div>\n          </div>\n        </Container>\n        <Info>Additional information</Info>\n        <LinkList>\n          <li>\n            <StyledNavLink to=\"cast\" state={{ from: backLinkRef }}>\n              Cast\n            </StyledNavLink>\n          </li>\n          <li>\n            <StyledNavLink to=\"reviews\" state={{ from: backLinkRef }}>\n              Reviews\n            </StyledNavLink>\n          </li>\n        </LinkList>\n        <Suspense fallback={<div>Loading page...</div>}>\n          <Outlet />\n        </Suspense>\n      </section>\n    )\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst searchParams = new URLSearchParams({\n  api_key: 'a20661da71bad761bc63fca9b3028f72',\n  method: 'GET',\n  language: 'en-US',\n  include_adult: false,\n });\n\nexport const fetchTrends = async () => {\n  const { data } = await axios.get(`/trending/movie/day?${searchParams}`);\n\n  return data.results;\n};\n\nexport const searchMovies = async query => {\n  const { data } = await axios.get(\n    `/search/movie?${searchParams}&query=${query}`\n  );\n\n  return data.results;\n};\n\nexport const fetchMoviesDetails = async (movieId) => {\n  const { data } = await axios.get(`/movie/${movieId}?${searchParams}`);\n\n  return data;\n};\n\nexport const fetchMoviesCast = async (movieId) => {\n  const { data } = await axios.get(`/movie/${movieId}/credits?${searchParams}`);\n\n  return data.cast;\n};\n\nexport const fetchMoviesReviews = async (movieId) => {\n  const { data } = await axios.get(`/movie/${movieId}/reviews?${searchParams}`);\n\n  return data.results;\n};\n"],"names":["Container","styled","MovieImage","StyledLink","Link","StyledNavLink","NavLink","Title","SubTitle","LinkList","Info","useState","movie","setMovie","movieId","useParams","backLinkRef","useLocation","state","from","useEffect","fetchMoviesDetails","then","data","to","src","poster_path","alt","title","Math","round","vote_average","overview","genres","map","genre","name","id","Suspense","fallback","axios","searchParams","URLSearchParams","api_key","method","language","include_adult","fetchTrends","results","searchMovies","query","fetchMoviesCast","cast","fetchMoviesReviews"],"sourceRoot":""}